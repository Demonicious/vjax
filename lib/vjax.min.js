const vjax = { request: function (e) { this.xhr = null, this.xhr = new XMLHttpRequest, e.onProgress && (this.xhr.onprogress = (() => { e.onProgress() })), e.hasOwnProperty("method") || (e.method = "GET"), e.hasOwnProperty("onResponse") && (this.xhr.onload = (() => { let r = { url: this.xhr.responseURL, status: this.xhr.status, headers: this.xhr.getAllResponseHeaders(), text: this.xhr.responseText }; this.xhr.getResponseHeader("content-type").includes("application/json") && (r.json = JSON.parse(r.text)), e.onResponse(r) })), e.hasOwnProperty("onError") && (this.xhr.onerror = (r => { e.onError(r) })), e.hasOwnProperty("onAbort") && (this.xhr.onabort = (() => { e.onAbort() })), e.hasOwnProperty("preProcess") && e.preProcess(); let r = null; if (e.hasOwnProperty("data")) if ("POST" == e.method) { let t; for (t in r = new FormData, e.data) r.append(t, e.data[t]) } else { let t; for (t in r = "", e.data) r += `${t}=${e.data[t]}`; let s = e.url.slice(-1); "/" != s && "\\" != s || (e.url = e.url.substring(0, e.url.length - 1)), e.url += `?${r}` } return this.xhr.open(e.method, e.url, !0), this.xhr.send(r), e.hasOwnProperty("onSend") && e.onSend(), this }, post: function (e) { return e.method = "POST", vjax.request(e) }, get: function (e) { return e.method = "GET", vjax.request(e) } };